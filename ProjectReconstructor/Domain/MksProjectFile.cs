using System;
using System.Collections.Generic;
using System.IO;
using ProjectReconstructor.Extensions;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.Build.Evaluation;
//using Microsoft.CodeAnalysis.Operations;
using Microsoft.CodeAnalysis;
using ProjectReconstructor.Domain;

namespace ProjectReconstructor
{
    public class MksProjectFile
    {
        protected bool Equals(MksProjectFile other)
        {
            return string.Equals(Name, other.Name);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((MksProjectFile) obj);
        }

        public override int GetHashCode()
        {
            return (Name != null ? Name.GetHashCode() : 0);
        }


        #region Props

        /// <summary>
        /// This is the path relative to the new solutionfile
        /// </summary>
        public string RelativePath { get; set; }

        public Uri AbsoluteTargetUri
        {
            get {return new Uri(AbsoluteTargetPath);}
        }

        public string AssemblyName { get; set; }

        /// <summary>
        /// This is the absolute path to the target
        /// </summary>
        public string AbsoluteTargetPath { get; set; }

        public string AbsoluteTargetDir
        {
            get { return Path.GetDirectoryName(AbsoluteTargetPath); }
        }

        public string AbsoluteSourePath { get; set; }

        public string AbsoluteSourcePathDir
        {
            get { return Path.GetDirectoryName(AbsoluteSourePath); }
        }
        /// <summary>
        /// The guid of the file
        /// </summary>
        public string Guid { get; set; }

        //the root name space of this project
        public string NameSpace { get; set; }
        /// <summary>
        /// This is the name of the csproj file without the .csproj name
        /// 
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// This is the name of the file. ex: foo.csproj
        /// </summary>
        public string FileName { get; set; }

        public string XML { get; set; }

        /// <summary>
        /// this is a string list of al the references we think should be contained
        /// generated by scanning all the files of the project
        /// </summary>
        public string[] References
        {
            get
            {
                var references = this.ProjectItems.SelectMany(c => c.References).Distinct().ToArray();
                return references;
            }
        }


        /// <summary>
        /// this is a string list of all the namespaces contained in the project
        /// </summary>
        public string[] NameSpaces
        {
            get
            {
                var nameSpaces = this.ProjectItems.SelectMany(c => c.NameSpaces).Distinct().ToArray();
                return nameSpaces;
            }
        }

        /// <summary>
        /// These are the raw Project Items that are grouped into this project
        /// file.
        /// </summary>
        public IList<MksProjectItem> ProjectItems { get; set; }

        #endregion


        public MksProjectFile()
        {
            ProjectItems = new List<MksProjectItem>();
        }




    }
}
