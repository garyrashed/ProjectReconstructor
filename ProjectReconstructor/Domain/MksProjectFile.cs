using System;
using System.Collections.Generic;
using System.IO;
using ProjectReconstructor.Extensions;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.Build.Evaluation;
using Microsoft.CodeAnalysis.Operations;

namespace ProjectReconstructor
{
    public class MksProjectFile
    {


        #region Props

        /// <summary>
        /// This is the path relative to the new solutionfile
        /// </summary>
        public string RelativePath { get; set; }

        /// <summary>
        /// This is the absolute path.
        /// </summary>
        public string AbsolutePath { get; set; }

        /// <summary>
        /// The guid of the file
        /// </summary>
        public string Guid { get; }

        //the root name space of this project
        public string NameSpace { get; }
        /// <summary>
        /// This is the name of the csproj file without the .csproj name
        /// 
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// This is the name of the file. ex: foo.csproj
        /// </summary>
        public string FileName { get; set; }

        /// <summary>
        /// this is a string list of al the references we think should be contained
        /// generated by scanning all the files of the project
        /// </summary>
        public string[] References { get; set; }

        /// <summary>
        /// this is a string list of all the namespaces contained in the project
        /// </summary>
        public string[] NameSpaces { get; set; }

        /// <summary>
        /// These are the raw Project Items that are grouped into this project
        /// file.
        /// </summary>
        public IEnumerable<ProjectItem> ProjectItems { get; }

        #endregion


        public MksProjectFile(string projectName, string RootDir, string targeDir)
        {
            var projectSkeleton = projectName.Split(new string[] {"_"}, StringSplitOptions.RemoveEmptyEntries);
            RelativePath = Path.Combine(RootDir, projectSkeleton.ConcatToString("\\"));
            FileName = projectName.ConcatToString("") + ".csproj";
            AbsolutePath = Path.Combine(targeDir, RootDir, RelativePath, FileName);
            Guid = LookupGuid(projectName);
        }

        private string LookupGuid(string projectName)
        {
            if(!File.Exists(@".\ProjectGuid"))
        }


        //public MksProjectFile(string directoryPath, string nameToUSe)
        //{

        //    ProjectItems = projectItems;

        //    References = 
        //}


        protected bool Equals(MksProjectFile other)
        {
            return string.Equals(RelativePath, other.RelativePath);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((MksProjectFile) obj);
        }

        public override int GetHashCode()
        {
            return (RelativePath != null ? RelativePath.GetHashCode() : 0);
        }
    }
}
